<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:lang="http://www.springframework.org/schema/lang" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
	>
	<!-- 配置数据源 -->
	<bean name="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" ></property>
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!--<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC" />
		<property name="username" value="root" />
		<property name="password" value="root123" />-->
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" /> <!--连接池最大使用连接数量 -->
		<property name="maxActive" value="20" /> <!--连接池最小空闲-->
		<property name="minIdle" value="0" /> <!--获取连接最大等待时间-->
		<property name="maxWait" value="60000" />
		<property name="poolPreparedStatements" value="true" />

		<!--<property name="validationQuery" value="SELECT 1" />-->
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" /> <!--配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒-->
		<property name="timeBetweenEvictionRunsMillis" value="60000" /> <!--配置一个连接在池中最小生存的时间，单位是毫秒-->
		<property name="minEvictableIdleTimeMillis" value="25200000" /> <!--打开removeAbandoned功能-->
		<property name="removeAbandoned" value="true" /> <!--1800秒，也就是30分钟-->
		<property name="removeAbandonedTimeout" value="1800" /> <!--关闭abanded连接时输出错误日志-->
		<property name="logAbandoned" value="true" /><!-- 监控数据库 -->
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />

		<!--<property name="typeAliasesPackage" value="com.zh.activiti.entity.*" />-->
		<!--<property name="mapperLocations" value="classpath:com/zh/framework/mapper/*.xml"/>-->
		<property name="configLocation" value="classpath:mybatis.xml"/>
	</bean>
	<bean id="fastJsonpResponseBodyAdvice" class="com.alibaba.fastjson.support.spring.FastJsonpResponseBodyAdvice">
		<constructor-arg>
			<list>
				<value>callback</value>
				<value>jsonp</value>
			</list>
		</constructor-arg>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zh.activiti.mapper,com.zh.activiti.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
		<!--<property name="annotationClass" value="com.zh.activiti.annotation.MyBatistaXmlDao"/>-->
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="do*" propagation="REQUIRED" />
			<tx:method name="excute*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- Spring aop事务管理 -->
	<aop:config>
		<aop:pointcut id="transactionPointcut"
					  expression="execution(* com.zh.activiti.service..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut"
					 advice-ref="transactionAdvice" />
	</aop:config>


</beans>